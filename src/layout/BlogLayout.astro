---
interface Props {
    title: string;
    description: string;
}

import Layout from "./Layout.astro";
---

<Layout {...Astro.props}>
    <article class="wrapper-layout">
        <section class="text-flow Contenido">
            <slot />
        </section>
        <aside class="Indice">
            <nav>
                <slot name="mapa" />
            </nav>
        </aside>
        
    </article>
</Layout>

<style lang="scss">
    @use "../scss/settings/" as *;
    article {
        display: grid;
        grid-template-columns: 1fr;
        grid-template-areas: "contenido";
        margin-inline: auto;
        padding-top: calc(var(--alto-header) + 1.5rem);
        gap: 2rem;

        @media (width > 1024px) {
            grid-template-columns: 1fr 300px;
            grid-template-areas: "contenido indice";
        }
    }

    .Contenido {
        grid-area: contenido;
        overflow-x: hidden;
        word-break: break-word;
        padding-block: 0;
        
        :global(:is(h1,h2,h3, p) > code) {
            display: inline;
            background-color: $color-primary-800;
            padding: .125rem .25rem;
            color: $color-contrast-100;
            border-radius: .25rem;
        }

        > :global(p) {
            color: $color-text-default;
        }
        > :global(h1) {
            color: $color-neutral-000;
            font-size: $fs-title1;
        }
        > :global(h2) {
            color: $color-neutral-000;
            font-size: $fs-title2;
        }
        > :global(h3) {
            color: $color-neutral-000;
            font-size: $fs-title3;
        }
    }

    .Indice {
        grid-area: indice;
        align-self: flex-start;
        display: none;

        @media (width > 1024px) {
            position: sticky;
            top: 4.5rem;
            display: block;
        }

        & :global(h4) {
            padding-left: 0.5rem;
            margin-bottom: 1rem;
        }
    }
</style>

<script>

document.addEventListener("astro:page-load", function () {



    const $titleIndice = document.querySelectorAll(
        ".Contenido > h1 , .Contenido > h2,.Contenido > h3",
    );
    const $linksIndice = document.querySelectorAll(".navIndice__link");

    const options = {
        rootMargin: "0px 0px -60% 0px",
        threshold: 1,
    };
    const observerIndice = new IntersectionObserver((entries, observer) => {
        entries.forEach((entry) => {
            if (entry.isIntersecting) {
                const links = entry.target as HTMLElement;
                const idTitulo = links.getAttribute("id");
                console.log(idTitulo);

                $linksIndice.forEach((link) => {
                    const idLink = link.getAttribute("href").replace(/^#/, "");
                    link.classList.remove("active");

                    if (idTitulo === idLink) {
                        link.classList.add("active");
                    }
                });
            }
        });
    }, options);

    $titleIndice.forEach((link) => {
        observerIndice.observe(link);
    });

});
</script>
