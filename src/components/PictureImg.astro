---
import type { HTMLAttributes } from "astro/types";
import type { ImagenOriginal } from "../data/GetDataCursos";

const Picture = {
    variants: {
        aspectRatio: {
            Auto: "aspect-ratio-auto",
            Box: "aspect-ratio-box",
            Video: "aspect-ratio-video",
            poster: "aspect-ratio-poster",
        },
    },
};

interface Props extends HTMLAttributes<"picture">, ImagenOriginal {
    classImg?: string;
    aspectRatio?: keyof typeof Picture.variants.aspectRatio;
}

const { imagen, alt, aspectRatio = 'Box', classImg, class : classes, ...attrs } = Astro.props;
---

<picture
    class:list={[
        Picture.variants.aspectRatio[aspectRatio],
        "lazy-picture animation-loader", classes
    ]}
    {...attrs}
>
    {
        imagen.map(({ url, type }) => (
            <source data-srcset={`/img/${url}`} type={`image/${type}`} />
        ))
    }
    <img  class:list={[Picture.variants.aspectRatio[aspectRatio], classImg]} alt={alt} />
</picture>

<script>
    document.addEventListener("astro:page-load", function () {

        const lazyImages = document.querySelectorAll(".lazy-picture");

    const observer = new IntersectionObserver(
        (entries, observer) => {
            entries.forEach((entry) => {
                if (entry.isIntersecting) {
                    const picture = entry.target;
                    const sources = picture.querySelectorAll("source");
                    const img = picture.querySelector("img");

                    sources.forEach((source) => {
                        source.srcset = source.dataset.srcset;
                        img.srcset = source.dataset.srcset;
                    });

                    img.addEventListener("load", () => {
                        setTimeout(() => {
                            img.parentElement.classList.remove(
                                "animation-loader",
                            );
                            img.parentElement.classList.add("loaderOk");
                        }, 500);
                    });

                    observer.unobserve(picture);
                }
            });
        },
        { rootMargin: "0px 0px 0px 0px" },
    );

    lazyImages.forEach((lazyImage) => {
        observer.observe(lazyImage);
    });
    });
    
</script>
